{"version":3,"names":["CToastType","CToastPosition","CAlertType"],"sources":["./src/types/index.ts"],"sourcesContent":["export interface CPaginationOptions {\n  itemCount: number;\n  currentPage?: number;\n  totalVisible?: number;\n  itemsPerPage?: number;\n  startFrom?: number;\n  endTo?: number;\n  locale?: string;\n  textOverrides?: CPaginationTextOverrides;\n}\n\nexport interface CPaginationTextOverrides {\n  itemsPerPageText?: string;\n  nextPage?: string;\n  prevPage?: string;\n  pageText?: ({ start, end, count }) => string;\n  pageOfText?: ({ pageNumber, count }) => string;\n}\n\nexport interface CSelectItem {\n  name: string;\n  value: string | number | boolean;\n}\n\nexport interface CAutocompleteItem extends CSelectItem {\n  ref?: HTMLElement;\n}\n\nexport interface CRadioGroupItem {\n  label: string;\n  value: string | number;\n}\n\nexport interface CDataTableFooterOptions {\n  itemsPerPageOptions?: number[];\n  hideDetails?: boolean;\n  simple?: boolean;\n  hideRange?: boolean;\n  size?: 'default' | 'small';\n}\n\nexport interface CDataTableHeader {\n  key: string;\n  value: null | string;\n  component?: CDataTableComponent;\n  width?: string;\n  // pin items to exlude the from being hidden\n  pinned?: boolean;\n  sortable?: boolean;\n  children?: CDataTableChild[];\n  hidden?: boolean;\n  align?: 'start' | 'center' | 'end';\n  justify?: 'start' | 'center' | 'end';\n}\n\nexport interface CDataTableData {\n  [key: string]: CDataTableDataItem;\n}\n\nexport interface CDataTableDataItem {\n  value: string | number;\n  formattedValue?: string | number;\n  children?: CDataTableChild[];\n  align?: 'start' | 'center' | 'end';\n  justify?: 'start' | 'center' | 'end';\n  component?: CDataTableComponent;\n}\n\nexport interface CDataTableChild {\n  value: null | string;\n  component?: CDataTableComponent;\n}\n\nexport interface CDataTableComponent {\n  tag: string;\n  params?: CDataTableComponentParams;\n  injectValue?: boolean;\n}\n\nexport interface CDataTableComponentParams {\n  [key: string]: any;\n  onClick?: (params: CDataTableFunctionParams) => unknown;\n}\n\nexport interface CDataTableFunctionParams {\n  event: MouseEvent;\n  index: number;\n  value: string | number;\n  key: string;\n  data: CDataTableData;\n}\n\nexport interface CNotificationItem {\n  name: string;\n  type: CNotificationItemType;\n  delay?: number;\n  requiresClosing?: boolean;\n}\n\nexport type CNotificationItemType = 'warning' | 'error' | 'success' | 'info';\n\nexport enum CToastType {\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n  Info = 'info',\n}\n\nexport enum CToastPosition {\n  Absolute = 'absolute',\n  Fixed = 'fixed',\n}\n\nexport interface CToastMessage {\n  message: string;\n  title?: string;\n  type?: CToastType;\n  duration?: number;\n  persistent?: boolean;\n  position?: CToastPosition;\n  id?: string;\n  closeText?: string;\n  indeterminate?: boolean;\n  progress?: boolean;\n  custom?: boolean;\n}\n\nexport enum CAlertType {\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n  Info = 'info',\n}\n\nexport interface CMenuCustomTrigger {\n  value: string;\n  component: {\n    tag: string;\n    params?: {\n      [key: string]: unknown;\n    };\n  };\n}\n\nexport interface CMenuOption {\n  name: string;\n  action: () => void;\n  disabled?: boolean;\n  icon?: string;\n  iconPosition?: 'start' | 'end';\n}\n\nexport type CSCColor =\n  | 'primary'\n  | 'primary-ghost'\n  | 'primary-ghost-hover'\n  | 'primary-hover'\n  | 'primary-text-hover'\n  | 'primary-hover'\n  | 'primary-text-hover'\n  | 'dark-grey'\n  | 'mid-grey'\n  | 'light-grey'\n  | 'light-grey-blue'\n  | 'lightest-grey'\n  | 'link'\n  | 'error'\n  | 'warning'\n  | 'success'\n  | 'info';\n"],"mappings":"IAqGYA,GAAZ,SAAYA,GACVA,EAAA,qBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,cACD,EALD,CAAYA,MAAU,K,IAOVC,GAAZ,SAAYA,GACVA,EAAA,uBACAA,EAAA,gBACD,EAHD,CAAYA,MAAc,K,IAmBdC,GAAZ,SAAYA,GACVA,EAAA,qBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,cACD,EALD,CAAYA,MAAU,Y"}