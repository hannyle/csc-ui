{"version":3,"names":["cModalCss","CModal","this","_debounce","onValueChange","value","setTimeout","innerValue","changeValue","emit","cardChild","el","querySelector","exitFullscreen","_hideModal","dismissable","animateModal","clearTimeout","window","componentDidLoad","width","isNaN","style","setProperty","render","modalClasses","overlayClasses","contentStyle","zIndex","overlayStyle","h","class","onClick"],"sources":["./src/components/c-modal/c-modal.scss?tag=c-modal&encapsulation=shadow","./src/components/c-modal/c-modal.tsx"],"sourcesContent":[".modal-wrapper {\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n.c-modal {\n  width: var(--c-modal-width, 600px);\n  max-width: calc(100% - 32px);\n  display: block;\n  position: fixed;\n  transform: scale(0);\n  transition: transform 0.2s cubic-bezier(0.25, 0.8, 0.5, 1);\n  pointer-events: all;\n\n  &--hide {\n    visibility: hidden;\n  }\n\n  &--show {\n    transform: scale(1);\n    visibility: visible;\n  }\n\n  &--animate {\n    animation-duration: 0.15s;\n    animation-name: animate-dialog;\n    animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);\n  }\n}\n\n.c-overlay {\n  background: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  transition: opacity 0.5s cubic-bezier(0.25, 0.8, 0.5, 1);\n  opacity: 0;\n  pointer-events: none;\n\n  &--hide {\n    visibility: hidden;\n  }\n\n  &--show {\n    opacity: 1;\n    pointer-events: all;\n    visibility: visible;\n  }\n}\n\n@keyframes animate-dialog {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.03);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n","import {\n  Component,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  State,\n  Watch,\n  Element,\n} from '@stencil/core';\n\n/**\n * @group Popups\n */\n@Component({\n  tag: 'c-modal',\n  styleUrl: 'c-modal.scss',\n  shadow: true,\n})\nexport class CModal {\n  @Element() el: HTMLCModalElement;\n\n  /**\n   * Is the modal visible\n   */\n  @Prop({ mutable: true }) value = false;\n\n  /**\n   * Dismissed when touching/clicking outside the content\n   */\n  @Prop() dismissable = false;\n\n  /**\n   * Width of the dialog. Numeric value is considered as pixel value (400 -> 400px)\n   *\n   */\n  @Prop() width: string | number = 600;\n\n  /**\n   * Z-index of the modal\n   */\n  @Prop() zIndex = 10;\n\n  /**\n   * Triggered when value is changed\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<boolean>;\n\n  @State() innerValue = false;\n\n  @State() animateModal = false;\n\n  private _debounce = null;\n\n  @Watch('value')\n  onValueChange(value: boolean) {\n    setTimeout(\n      () => {\n        this.innerValue = value;\n        this.changeValue.emit(this.value);\n\n        const cardChild = this.el.querySelector('c-card');\n\n        if (!value && cardChild) {\n          cardChild.exitFullscreen();\n        }\n      },\n      value ? 0 : 500,\n    );\n  }\n\n  private _hideModal() {\n    if (!this.dismissable) {\n      this.animateModal = true;\n\n      if (this._debounce !== null) {\n        clearTimeout(this._debounce);\n        this._debounce = null;\n      }\n\n      this._debounce = window.setTimeout(() => {\n        this.animateModal = false;\n\n        this._debounce = null;\n      }, 150);\n\n      return;\n    }\n\n    this.value = false;\n    this.changeValue.emit(this.value);\n  }\n\n  componentDidLoad() {\n    this.innerValue = this.value;\n\n    const width = isNaN(this.width as number) ? this.width : `${this.width}px`;\n\n    this.el.style.setProperty('--c-modal-width', `${width}`);\n  }\n\n  render() {\n    const modalClasses = {\n      'c-modal': true,\n      'c-modal--show': this.value,\n      'c-modal--hide': !this.innerValue,\n      'c-modal--animate': this.animateModal,\n    };\n\n    const overlayClasses = {\n      'c-overlay': true,\n      'c-overlay--hide': !this.innerValue,\n      'c-overlay--show': this.value,\n    };\n\n    const contentStyle = {\n      'z-index': `${this.zIndex + 1}`,\n    };\n\n    const overlayStyle = {\n      'z-index': `${this.zIndex}`,\n    };\n\n    return (\n      <div class=\"modal-wrapper\">\n        <div\n          class={modalClasses}\n          aria-hidden={!this.value}\n          style={contentStyle}\n        >\n          {this.innerValue && <slot></slot>}\n        </div>\n        <div\n          class={overlayClasses}\n          style={overlayStyle}\n          onClick={() => this._hideModal()}\n        ></div>\n      </div>\n    );\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAY,20D,MCmBLC,EAAM,M,kEAiCTC,KAAAC,UAAY,K,WA3Ba,M,iBAKX,M,WAMW,I,YAKhB,G,gBAOK,M,kBAEE,K,CAKxBC,cAAcC,GACZC,YACE,KACEJ,KAAKK,WAAaF,EAClBH,KAAKM,YAAYC,KAAKP,KAAKG,OAE3B,MAAMK,EAAYR,KAAKS,GAAGC,cAAc,UAExC,IAAKP,GAASK,EAAW,CACvBA,EAAUG,gB,IAGdR,EAAQ,EAAI,I,CAIRS,aACN,IAAKZ,KAAKa,YAAa,CACrBb,KAAKc,aAAe,KAEpB,GAAId,KAAKC,YAAc,KAAM,CAC3Bc,aAAaf,KAAKC,WAClBD,KAAKC,UAAY,I,CAGnBD,KAAKC,UAAYe,OAAOZ,YAAW,KACjCJ,KAAKc,aAAe,MAEpBd,KAAKC,UAAY,IAAI,GACpB,KAEH,M,CAGFD,KAAKG,MAAQ,MACbH,KAAKM,YAAYC,KAAKP,KAAKG,M,CAG7Bc,mBACEjB,KAAKK,WAAaL,KAAKG,MAEvB,MAAMe,EAAQC,MAAMnB,KAAKkB,OAAmBlB,KAAKkB,MAAQ,GAAGlB,KAAKkB,UAEjElB,KAAKS,GAAGW,MAAMC,YAAY,kBAAmB,GAAGH,I,CAGlDI,SACE,MAAMC,EAAe,CACnB,UAAW,KACX,gBAAiBvB,KAAKG,MACtB,iBAAkBH,KAAKK,WACvB,mBAAoBL,KAAKc,cAG3B,MAAMU,EAAiB,CACrB,YAAa,KACb,mBAAoBxB,KAAKK,WACzB,kBAAmBL,KAAKG,OAG1B,MAAMsB,EAAe,CACnB,UAAW,GAAGzB,KAAK0B,OAAS,KAG9B,MAAMC,EAAe,CACnB,UAAW,GAAG3B,KAAK0B,UAGrB,OACEE,EAAA,OAAKC,MAAM,iBACTD,EAAA,OACEC,MAAON,EAAY,eACLvB,KAAKG,MACnBiB,MAAOK,GAENzB,KAAKK,YAAcuB,EAAA,cAEtBA,EAAA,OACEC,MAAOL,EACPJ,MAAOO,EACPG,QAAS,IAAM9B,KAAKY,e"}