{"version":3,"names":["cTabButtonsCss","CTabButtons","onValueChange","value","this","el","childNodes","forEach","button","outlined","buttons","find","btn","changeValue","emit","_b","_a","onTabChange","event","isActive","_isIndexBased","detail","mandatory","nullValue","Array","from","filter","element","tagName","componentDidLoad","every","index","setAttribute","String","grouped","disabled","hostDisabled","size","buttonElement","shadowRoot","querySelector","classList","add","render","classes","h","class"],"sources":["./src/components/c-tab-buttons/c-tab-buttons.scss?tag=c-tab-buttons&encapsulation=shadow","./src/components/c-tab-buttons/c-tab-buttons.tsx"],"sourcesContent":[".c-tab-buttons {\n  --c-switch-border-color: var(--csc-primary);\n\n  display: flex;\n  flex-wrap: wrap;\n  box-shadow: 0 0 0 2px var(--c-switch-border-color);\n  margin: 2px;\n  border-radius: var(--csc-border-radius);\n  background-color: var(--csc-primary);\n  gap: 2px;\n\n  ::slotted(*) {\n    flex-grow: 1;\n  }\n\n  &--disabled {\n    --c-switch-border-color: var(--csc-light-grey);\n    pointer-events: none;\n    background-color: var(--csc-light-grey);\n  }\n}\n\n::slotted(c-button:first-child) {\n  --c-radius: 4px 0 0 4px;\n}\n\n::slotted(c-button:last-child) {\n  --c-radius: 0 4px 4px 0;\n}\n","import {\n  Component,\n  h,\n  Element,\n  Prop,\n  Event,\n  EventEmitter,\n  Watch,\n  Listen,\n} from '@stencil/core';\n\n/**\n * @group Content Selectors\n * @slot - Default slot for the c-button elements\n */\n@Component({\n  tag: 'c-tab-buttons',\n  styleUrl: 'c-tab-buttons.scss',\n  shadow: true,\n})\nexport class CTabButtons {\n  /**\n   * Value of tab buttons\n   */\n  @Prop({ mutable: true }) value!: number | string;\n\n  /**\n   * Always require a selection\n   */\n  @Prop() mandatory = false;\n\n  /**\n   * Size of the buttons\n   */\n  @Prop() size: 'default' | 'small' = 'default';\n\n  /**\n   * Disable tab buttons\n   */\n  @Prop({ attribute: 'disabled' }) hostDisabled = false;\n\n  /**\n   * Emit changes to the parent\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<number | string>;\n\n  @Element() el: HTMLCTabButtonsElement;\n\n  private _isIndexBased: boolean;\n\n  @Watch('value')\n  onValueChange(value: string | number) {\n    this.el.childNodes.forEach((button: HTMLCButtonElement) => {\n      button.outlined = true;\n    });\n\n    if (value !== null) {\n      const button =\n        this.buttons.find((btn) => btn.value === value) || this.buttons[value];\n\n      if (button) button.outlined = false;\n    }\n\n    this.changeValue.emit(this.buttons[value]?.value ?? value);\n  }\n\n  @Listen('tabChange', { passive: true })\n  onTabChange(event: CustomEvent) {\n    const isActive =\n      this.value !== null &&\n      (this._isIndexBased\n        ? +event.detail === +this.value\n        : event.detail === this.value);\n\n    // Disable deselection if mandatory prop is set to true\n    if (this.mandatory && isActive) {\n      return;\n    }\n\n    const nullValue = this._isIndexBased ? null : '';\n    const value = this._isIndexBased ? +event.detail : event.detail;\n\n    this.value = isActive ? nullValue : value;\n  }\n\n  get buttons() {\n    return Array.from(this.el.childNodes).filter(\n      (element: HTMLCButtonElement) => element.tagName === 'C-BUTTON',\n    ) as HTMLCButtonElement[];\n  }\n\n  componentDidLoad() {\n    // use 0 as value if nothing is provided\n    this.value = this.value ?? 0;\n\n    this._isIndexBased = this.buttons.every(\n      (button) => typeof button.value === 'undefined',\n    );\n\n    this.buttons.forEach((button: HTMLCButtonElement, index) => {\n      button.setAttribute('data-index', String(index));\n      button.grouped = true;\n      button.disabled = this.hostDisabled;\n      button.size = this.size;\n\n      const isActive =\n        this.value !== null &&\n        (this._isIndexBased\n          ? index === +this.value\n          : button.value === this.value);\n\n      button.outlined = !isActive;\n\n      const buttonElement = button.shadowRoot.querySelector('.c-button');\n\n      buttonElement.classList.add('grouped');\n    });\n  }\n\n  render() {\n    const classes = {\n      'c-tab-buttons': true,\n      'c-tab-buttons--disabled': this.hostDisabled,\n    };\n\n    return (\n      <div class={classes}>\n        <slot></slot>\n      </div>\n    );\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAiB,66C,MCoBVC,EAAW,M,sGASF,M,UAKgB,U,kBAKY,K,CAYhDC,cAAcC,G,QACZC,KAAKC,GAAGC,WAAWC,SAASC,IAC1BA,EAAOC,SAAW,IAAI,IAGxB,GAAIN,IAAU,KAAM,CAClB,MAAMK,EACJJ,KAAKM,QAAQC,MAAMC,GAAQA,EAAIT,QAAUA,KAAUC,KAAKM,QAAQP,GAElE,GAAIK,EAAQA,EAAOC,SAAW,K,CAGhCL,KAAKS,YAAYC,MAAKC,GAAAC,EAAAZ,KAAKM,QAAQP,MAAM,MAAAa,SAAA,SAAAA,EAAEb,SAAK,MAAAY,SAAA,EAAAA,EAAIZ,E,CAItDc,YAAYC,GACV,MAAMC,EACJf,KAAKD,QAAU,OACdC,KAAKgB,eACDF,EAAMG,UAAYjB,KAAKD,MACxBe,EAAMG,SAAWjB,KAAKD,OAG5B,GAAIC,KAAKkB,WAAaH,EAAU,CAC9B,M,CAGF,MAAMI,EAAYnB,KAAKgB,cAAgB,KAAO,GAC9C,MAAMjB,EAAQC,KAAKgB,eAAiBF,EAAMG,OAASH,EAAMG,OAEzDjB,KAAKD,MAAQgB,EAAWI,EAAYpB,C,CAGlCO,cACF,OAAOc,MAAMC,KAAKrB,KAAKC,GAAGC,YAAYoB,QACnCC,GAAgCA,EAAQC,UAAY,Y,CAIzDC,mB,MAEEzB,KAAKD,OAAQa,EAAAZ,KAAKD,SAAK,MAAAa,SAAA,EAAAA,EAAI,EAE3BZ,KAAKgB,cAAgBhB,KAAKM,QAAQoB,OAC/BtB,UAAkBA,EAAOL,QAAU,cAGtCC,KAAKM,QAAQH,SAAQ,CAACC,EAA4BuB,KAChDvB,EAAOwB,aAAa,aAAcC,OAAOF,IACzCvB,EAAO0B,QAAU,KACjB1B,EAAO2B,SAAW/B,KAAKgC,aACvB5B,EAAO6B,KAAOjC,KAAKiC,KAEnB,MAAMlB,EACJf,KAAKD,QAAU,OACdC,KAAKgB,cACFW,KAAW3B,KAAKD,MAChBK,EAAOL,QAAUC,KAAKD,OAE5BK,EAAOC,UAAYU,EAEnB,MAAMmB,EAAgB9B,EAAO+B,WAAWC,cAAc,aAEtDF,EAAcG,UAAUC,IAAI,UAAU,G,CAI1CC,SACE,MAAMC,EAAU,CACd,gBAAiB,KACjB,0BAA2BxC,KAAKgC,cAGlC,OACES,EAAA,OAAKC,MAAOF,GACVC,EAAA,a"}