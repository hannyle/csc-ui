{"version":3,"names":["cTextFieldCss","CTextField","this","_originalType","_uniqueId","uuid","_handleChange","event","value","trimWhitespace","target","trim","changeValue","emit","_handleBlur","trimmedValue","_togglePasswordVisibility","disabled","type","show","content","componentWillLoad","_inputId","hostId","label","placeholder","replace","isActive","isFocused","passwordIcon","mdiEye","mdiEyeOff","_renderInputElement","props","classes","shared","id","name","readonly","onInput","onChange","onBlur","input","Object","assign","number","min","max","step","autocomplete","autocapitalize","autocorrect","textArea","rows","textInput","h","class","ref","el","_inputElement","_isFirefox","navigator","userAgent","match","_renderDateToggle","viewBox","onClick","_toggleDatepicker","bind","d","mdiCalendar","_a","showPicker","_renderPasswordToggle","render","Host","autofocus","hideDetails","hint","required","shadow","valid","validate","validateOnBlur","validation","slot"],"sources":["./src/components/c-text-field/c-text-field.scss?tag=c-text-field","./src/components/c-text-field/c-text-field.tsx"],"sourcesContent":[".c-input {\n  &__password-toggle,\n  &__date-toggle {\n    cursor: pointer;\n    fill: currentColor;\n    height: 22px;\n    width: 22px;\n\n    &--disabled {\n      cursor: not-allowed;\n      fill: rgba(0, 0, 0, 0.54);\n    }\n  }\n\n  input {\n    &[type=\"date\"] {\n      opacity: 0;\n\n      &::-webkit-calendar-picker-indicator,\n      &::-webkit-inner-spin-button {\n        display: none;\n        appearance: none;\n      }\n\n      &:focus,\n      &.c-input__input--filled {\n        opacity: 1;\n      }\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { v4 as uuid } from 'uuid';\nimport { mdiCalendar, mdiEye, mdiEyeOff } from '@mdi/js';\n\n/**\n * @group Form\n */\n@Component({\n  tag: 'c-text-field',\n  styleUrl: 'c-text-field.scss',\n  shadow: false,\n})\nexport class CTextField {\n  /**\n   * Auto focus the input\n   */\n  @Prop() autofocus = false;\n\n  /**\n   * HTML input autocapitalize\n   */\n  @Prop() autocapitalize = '';\n\n  /**\n   * HTML input autocorrect\n   */\n  @Prop() autocorrect = '';\n\n  /**\n   * HTML input autocomplete\n   */\n  @Prop() autocomplete = '';\n\n  /**\n   * Disable the input\n   */\n  @Prop() disabled = false;\n\n  /**\n   * Hide the hint and error messages\n   */\n  @Prop() hideDetails = false;\n\n  /**\n   * Hint text for the input\n   */\n  @Prop() hint = '';\n\n  /**\n   * Id of the input\n   */\n  @Prop({ attribute: 'id' }) hostId: string;\n\n  /**\n   * Trim whitespace from the return value\n   */\n  @Prop() trimWhitespace = false;\n\n  /**\n   * Label of the input\n   */\n  @Prop() label: string;\n\n  /**\n   * Maximum value on a numeric input\n   */\n  @Prop() max: number = null;\n\n  /**\n   * Minimum value on a numeric input\n   */\n  @Prop() min: number = null;\n\n  /**\n   * Name of the input\n   */\n  @Prop() name: string;\n\n  /**\n   * Numeric input\n   *\n   * @deprecated Use type=\"number\" instead\n   */\n  @Prop() number = false;\n\n  /**\n   * Placeholder of the input\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * Mark as readonly\n   */\n  @Prop() readonly = false;\n\n  /**\n   * Set the input as required\n   */\n  @Prop() required = false;\n\n  /**\n   * Rows on the input\n   */\n  @Prop() rows = 1;\n\n  /**\n   * Shadow variant of the input\n   */\n  @Prop() shadow = false;\n\n  /**\n   * Step size on a numeric input\n   */\n  @Prop() step: number = null;\n\n  /**\n   * Type of the input\n   */\n  @Prop() type: string;\n\n  /**\n   * Set the validÃ­ty of the input\n   */\n  @Prop() valid = true;\n\n  /**\n   * Manual validation\n   */\n  @Prop() validate = false;\n\n  /**\n   * Validate the input on blur\n   */\n  @Prop() validateOnBlur = false;\n\n  /**\n   * Custom validation message\n   */\n  @Prop() validation = 'Required field';\n\n  /**\n   * Value of the input\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * Emit changes to the parent\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter;\n\n  @State() isFocused = false;\n\n  @State() labelWidth = 0;\n\n  @State() preSlotWidth = 0;\n\n  @State() messageOptions = {\n    show: true,\n    type: 'hint',\n    content: '',\n  };\n\n  @Element() hiddenEl!: HTMLCTextFieldElement;\n\n  private _inputElement: HTMLInputElement;\n\n  private _originalType = '';\n\n  private _inputId: string;\n\n  private _uniqueId = uuid();\n\n  componentWillLoad() {\n    this._originalType = this.type;\n\n    this._inputId = `${(this.hostId || this.label || this.placeholder).replace(\n      /[^a-zA-Z0-9-_]/g,\n      '',\n    )}_${this._uniqueId}`;\n  }\n\n  get isActive() {\n    return !!this.value || this.isFocused;\n  }\n\n  get passwordIcon() {\n    return this.type === 'password' ? mdiEye : mdiEyeOff;\n  }\n\n  private _handleChange = (event) => {\n    this.value = this.trimWhitespace\n      ? event.target.value.trim()\n      : event.target.value;\n\n    this.changeValue.emit(this.value);\n  };\n\n  private _handleBlur = (event) => {\n    if (this.trimWhitespace) {\n      const trimmedValue = event.target.value.trim();\n\n      event.target.value = trimmedValue;\n    }\n  };\n\n  private _renderInputElement() {\n    const props = {\n      classes: {\n        'c-input__input': true,\n        'c-input__input--filled': !!this.value,\n      },\n      shared: {\n        id: this._inputId,\n        name: this.name,\n        disabled: this.disabled,\n        readonly: this.readonly,\n        value: this.value,\n        onInput: this._handleChange,\n        onChange: this._handleChange,\n        onBlur: this._handleBlur,\n      },\n      input: {\n        type: this.number ? 'number' : this.type || 'text',\n        min: this.min,\n        max: this.max,\n        step: this.step,\n        ...(!!this.autocomplete && { autocomplete: this.autocomplete }),\n        ...(!!this.autocapitalize && { autocapitalize: this.autocapitalize }),\n        ...(!!this.autocorrect && { autocorrect: this.autocorrect }),\n      },\n      textArea: {\n        rows: this.rows,\n      },\n    };\n\n    const textInput = (\n      <input\n        class={props.classes}\n        {...props.shared}\n        {...props.input}\n        ref={(el) => (this._inputElement = el)}\n      />\n    );\n\n    const textArea = (\n      <textarea\n        class={props.classes}\n        {...props.shared}\n        {...props.textArea}\n      ></textarea>\n    );\n\n    return this.rows > 1 ? textArea : textInput;\n  }\n\n  private _isFirefox() {\n    return !!navigator.userAgent.match(/firefox|fxios/i);\n  }\n\n  private _renderDateToggle() {\n    if (this._originalType !== 'date' || this._isFirefox()) return;\n\n    const classes = {\n      'c-input__date-toggle': true,\n      'c-input__date-toggle--disabled': this.disabled,\n    };\n\n    return (\n      <svg\n        class={classes}\n        viewBox=\"0 0 24 24\"\n        onClick={this._toggleDatepicker.bind(this)}\n      >\n        <path d={mdiCalendar} />\n      </svg>\n    );\n  }\n\n  private _toggleDatepicker() {\n    this._inputElement?.showPicker();\n  }\n\n  private _renderPasswordToggle() {\n    if (this._originalType !== 'password') return;\n\n    const classes = {\n      'c-input__password-toggle': true,\n      'c-input__password-toggle--disabled': this.disabled,\n    };\n\n    return (\n      <svg\n        class={classes}\n        viewBox=\"0 0 24 24\"\n        onClick={this._togglePasswordVisibility}\n      >\n        <path d={this.passwordIcon} />\n      </svg>\n    );\n  }\n\n  private _togglePasswordVisibility = () => {\n    if (this.disabled) return;\n\n    this.type = this.type === 'password' ? 'text' : 'password';\n  };\n\n  render() {\n    return (\n      <Host>\n        <c-input\n          autofocus={this.autofocus}\n          disabled={this.disabled}\n          hide-details={this.hideDetails}\n          hint={this.hint}\n          id={this.hostId}\n          input-id={this._inputId}\n          label={this.label}\n          name={this.name}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          shadow={this.shadow}\n          type={this.type}\n          valid={this.valid}\n          validate={this.validate}\n          validate-on-blur={this.validateOnBlur}\n          validation={this.validation}\n          value={this.value}\n        >\n          <slot name=\"pre\" slot=\"pre\"></slot>\n\n          {this._renderInputElement()}\n\n          {this._renderPasswordToggle()}\n\n          {this._renderDateToggle()}\n\n          <slot name=\"post\" slot=\"post\"></slot>\n        </c-input>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}