{"version":3,"file":"c-switch.js","sourceRoot":"","sources":["../../../src/components/c-switch/c-switch.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,CAAC,EACD,OAAO,EACP,IAAI,EACJ,KAAK,EACL,KAAK,GAEN,MAAM,eAAe,CAAC;AAUvB,MAAM,OAAO,OAAO;;IAoCV,yBAAoB,GAAG,CAAC,KAAY,EAAE,EAAE;MAC9C,MAAM,KAAK,GAAI,KAAK,CAAC,aAAkC,CAAC,OAAO,CAAC;MAEhE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;MACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC;wBArC8C,KAAK;;oBAUlC,KAAK;iBAKS,KAAK;oBAIlB,KAAK;;EAOzB,gBAAgB;IACd,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IAErC,IAAI,CAAC,QAAQ,GAAG,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;EAChD,CAAC;EASD,MAAM;IACJ,MAAM,OAAO,GAAG;MACd,UAAU,EAAE,IAAI;MAChB,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY;MACzC,iBAAiB,EAAE,IAAI,CAAC,QAAQ;KACjC,CAAC;IAEF,OAAO,CACL,aAAO,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM;MACzC,WAAK,KAAK,EAAC,iBAAiB;QAC1B,aACE,EAAE,EAAE,IAAI,CAAC,MAAM,kBACD,IAAI,CAAC,KAAK,EACxB,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,OAAO,EAAE,IAAI,CAAC,KAAK,EACnB,OAAO,EAAE,IAAI,CAAC,oBAAoB,GAClC;QACF,YAAM,KAAK,EAAC,kBAAkB,GAAQ,CAClC;MACL,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CACf,WAAK,KAAK,EAAC,iBAAiB;QAC1B,eAAa;QAEZ,IAAI,CAAC,QAAQ,IAAI,YAAM,KAAK,EAAC,UAAU,cAAe,CACnD,CACP,CAAC,CAAC,CAAC,IAAI,CACF,CACT,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  h,\n  Element,\n  Prop,\n  State,\n  Event,\n  EventEmitter,\n} from '@stencil/core';\n\n/**\n * @group Form\n */\n@Component({\n  tag: 'c-switch',\n  styleUrl: 'c-switch.scss',\n  shadow: true,\n})\nexport class CSwitch {\n  /**\n   * Disable the switch\n   */\n  @Prop({ attribute: 'disabled' }) hostDisabled = false;\n\n  /**\n   * Id for the element\n   */\n  @Prop({ attribute: 'id' }) hostId: string;\n\n  /**\n   * Set as required\n   */\n  @Prop() required = false;\n\n  /**\n   * Value of the element\n   */\n  @Prop({ mutable: true }) value = false;\n\n  @Element() host: HTMLCSwitchElement;\n\n  @State() hasLabel = false;\n\n  /**\n   * Emit inner value change to parent\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<boolean>;\n\n  componentDidLoad() {\n    const slotted = this.host.childNodes;\n\n    this.hasLabel = slotted && slotted.length > 0;\n  }\n\n  private _valueChangedHandler = (event: Event) => {\n    const value = (event.currentTarget as HTMLInputElement).checked;\n\n    this.value = value;\n    this.changeValue.emit(value);\n  };\n\n  render() {\n    const classes = {\n      'c-switch': true,\n      'c-switch--disabled': !!this.hostDisabled,\n      'c-switch--label': this.hasLabel,\n    };\n\n    return (\n      <label class={classes} htmlFor={this.hostId}>\n        <div class=\"c-switch__input\">\n          <input\n            id={this.hostId}\n            aria-checked={this.value}\n            type=\"checkbox\"\n            role=\"switch\"\n            disabled={this.hostDisabled}\n            checked={this.value}\n            onInput={this._valueChangedHandler}\n          />\n          <span class=\"c-switch__slider\"></span>\n        </div>\n        {this.hasLabel ? (\n          <div class=\"c-switch__label\">\n            <slot></slot>\n\n            {this.required && <span class=\"required\">&nbsp;*</span>}\n          </div>\n        ) : null}\n      </label>\n    );\n  }\n}\n"]}