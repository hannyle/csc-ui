{"file":"c-modal.js","mappings":";;AAAA,MAAM,SAAS,GAAG,00DAA00D;;MCmB/0DA,QAAM;;;;;;IAiCT,cAAS,GAAG,IAAI,CAAC;iBA3BQ,KAAK;uBAKhB,KAAK;iBAMM,GAAG;kBAKnB,EAAE;sBAOG,KAAK;wBAEH,KAAK;;EAK7B,aAAa,CAAC,KAAc;IAC1B,UAAU,CACR;MACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;MACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MAElC,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;MAElD,IAAI,CAAC,KAAK,IAAI,SAAS,EAAE;QACvB,SAAS,CAAC,cAAc,EAAE,CAAC;OAC5B;KACF,EACD,KAAK,GAAG,CAAC,GAAG,GAAG,CAChB,CAAC;GACH;EAEO,UAAU;IAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;MACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;MAEzB,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;QAC3B,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;OACvB;MAED,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;OACvB,EAAE,GAAG,CAAC,CAAC;MAER,OAAO;KACR;IAED,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACnC;EAED,gBAAgB;IACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;IAE7B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAe,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC;IAE3E,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;GAC1D;EAED,MAAM;IACJ,MAAM,YAAY,GAAG;MACnB,SAAS,EAAE,IAAI;MACf,eAAe,EAAE,IAAI,CAAC,KAAK;MAC3B,eAAe,EAAE,CAAC,IAAI,CAAC,UAAU;MACjC,kBAAkB,EAAE,IAAI,CAAC,YAAY;KACtC,CAAC;IAEF,MAAM,cAAc,GAAG;MACrB,WAAW,EAAE,IAAI;MACjB,iBAAiB,EAAE,CAAC,IAAI,CAAC,UAAU;MACnC,iBAAiB,EAAE,IAAI,CAAC,KAAK;KAC9B,CAAC;IAEF,MAAM,YAAY,GAAG;MACnB,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;KAChC,CAAC;IAEF,MAAM,YAAY,GAAG;MACnB,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;KAC5B,CAAC;IAEF,QACE,WAAK,KAAK,EAAC,eAAe,IACxB,WACE,KAAK,EAAE,YAAY,iBACN,CAAC,IAAI,CAAC,KAAK,EACxB,KAAK,EAAE,YAAY,IAElB,IAAI,CAAC,UAAU,IAAI,eAAa,CAC7B,EACN,WACE,KAAK,EAAE,cAAc,EACrB,KAAK,EAAE,YAAY,EACnB,OAAO,EAAE,MAAM,IAAI,CAAC,UAAU,EAAE,GAC3B,CACH,EACN;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CModal"],"sources":["./src/components/c-modal/c-modal.scss?tag=c-modal&encapsulation=shadow","./src/components/c-modal/c-modal.tsx"],"sourcesContent":[".modal-wrapper {\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n.c-modal {\n  width: var(--c-modal-width, 600px);\n  max-width: calc(100% - 32px);\n  display: block;\n  position: fixed;\n  transform: scale(0);\n  transition: transform 0.2s cubic-bezier(0.25, 0.8, 0.5, 1);\n  pointer-events: all;\n\n  &--hide {\n    visibility: hidden;\n  }\n\n  &--show {\n    transform: scale(1);\n    visibility: visible;\n  }\n\n  &--animate {\n    animation-duration: 0.15s;\n    animation-name: animate-dialog;\n    animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);\n  }\n}\n\n.c-overlay {\n  background: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  transition: opacity 0.5s cubic-bezier(0.25, 0.8, 0.5, 1);\n  opacity: 0;\n  pointer-events: none;\n\n  &--hide {\n    visibility: hidden;\n  }\n\n  &--show {\n    opacity: 1;\n    pointer-events: all;\n    visibility: visible;\n  }\n}\n\n@keyframes animate-dialog {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.03);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n","import {\n  Component,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  State,\n  Watch,\n  Element,\n} from '@stencil/core';\n\n/**\n * @group Popups\n */\n@Component({\n  tag: 'c-modal',\n  styleUrl: 'c-modal.scss',\n  shadow: true,\n})\nexport class CModal {\n  @Element() el: HTMLCModalElement;\n\n  /**\n   * Is the modal visible\n   */\n  @Prop({ mutable: true }) value = false;\n\n  /**\n   * Dismissed when touching/clicking outside the content\n   */\n  @Prop() dismissable = false;\n\n  /**\n   * Width of the dialog. Numeric value is considered as pixel value (400 -> 400px)\n   *\n   */\n  @Prop() width: string | number = 600;\n\n  /**\n   * Z-index of the modal\n   */\n  @Prop() zIndex = 10;\n\n  /**\n   * Triggered when value is changed\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<boolean>;\n\n  @State() innerValue = false;\n\n  @State() animateModal = false;\n\n  private _debounce = null;\n\n  @Watch('value')\n  onValueChange(value: boolean) {\n    setTimeout(\n      () => {\n        this.innerValue = value;\n        this.changeValue.emit(this.value);\n\n        const cardChild = this.el.querySelector('c-card');\n\n        if (!value && cardChild) {\n          cardChild.exitFullscreen();\n        }\n      },\n      value ? 0 : 500,\n    );\n  }\n\n  private _hideModal() {\n    if (!this.dismissable) {\n      this.animateModal = true;\n\n      if (this._debounce !== null) {\n        clearTimeout(this._debounce);\n        this._debounce = null;\n      }\n\n      this._debounce = window.setTimeout(() => {\n        this.animateModal = false;\n\n        this._debounce = null;\n      }, 150);\n\n      return;\n    }\n\n    this.value = false;\n    this.changeValue.emit(this.value);\n  }\n\n  componentDidLoad() {\n    this.innerValue = this.value;\n\n    const width = isNaN(this.width as number) ? this.width : `${this.width}px`;\n\n    this.el.style.setProperty('--c-modal-width', `${width}`);\n  }\n\n  render() {\n    const modalClasses = {\n      'c-modal': true,\n      'c-modal--show': this.value,\n      'c-modal--hide': !this.innerValue,\n      'c-modal--animate': this.animateModal,\n    };\n\n    const overlayClasses = {\n      'c-overlay': true,\n      'c-overlay--hide': !this.innerValue,\n      'c-overlay--show': this.value,\n    };\n\n    const contentStyle = {\n      'z-index': `${this.zIndex + 1}`,\n    };\n\n    const overlayStyle = {\n      'z-index': `${this.zIndex}`,\n    };\n\n    return (\n      <div class=\"modal-wrapper\">\n        <div\n          class={modalClasses}\n          aria-hidden={!this.value}\n          style={contentStyle}\n        >\n          {this.innerValue && <slot></slot>}\n        </div>\n        <div\n          class={overlayClasses}\n          style={overlayStyle}\n          onClick={() => this._hideModal()}\n        ></div>\n      </div>\n    );\n  }\n}\n"],"version":3}