{"file":"c-card.js","mappings":";;;;;AAAA,MAAM,QAAQ,GAAG,u3CAAu3C;;MCwB33CA,OAAK;;;;;IAoBR,wBAAmB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;;2BAXhC,OAAO;sBAKZ,KAAK;wBAEF,KAAK;;EAMrB,aAAa;;IACnB,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;IAEvC,MAAM,YAAY,GAChB,MAAA,MAAA,IAAI,CAAC,IAAI,CAAC,aAAa,0CAAE,UAAU,0CAAE,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAEvE,IAAI,YAAY,EAAE;MACf,YAA+B,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY;UAC9D,OAAO;UACP,MAAM,CAAC;KACZ;GACF;EAED,gBAAgB;IACd,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAEtD,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE;MAC9B,KAAK,CAAC,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC;KAClC;GACF;EAMD,MAAM,cAAc;;IAClB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAE1B,MAAM,YAAY,GAChB,MAAA,MAAA,IAAI,CAAC,IAAI,CAAC,aAAa,0CAAE,UAAU,0CAAE,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAEvE,IAAI,YAAY,EAAE;MACf,YAA+B,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;KACzD;GACF;EAMD,MAAM,eAAe;IACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;GAC1B;EAED,MAAM;IACJ,MAAM,KAAK,GAAG;MACZ,kBAAkB,EAAE,IAAI,CAAC,eAAe;KACzC,CAAC;IAEF,MAAM,WAAW,GAAG;MAClB,QAAQ,EAAE,IAAI;MACd,oBAAoB,EAAE,IAAI,CAAC,YAAY;KACxC,CAAC;IAEF,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;MACtD,KAAK,CAAC,kBAAkB,CAAC,GAAG,OAAO,YAAY,CAC7C,YAAY,IAAI,CAAC,UAAU,MAAM,CAClC,EAAE,CAAC;MACJ,KAAK,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC;MACnC,KAAK,CAAC,uBAAuB,CAAC,GAAG,QAAQ,CAAC;KAC3C;IAED,QACE,EAAC,IAAI,IAAC,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,IACnC,IAAI,CAAC,UAAU,KACd,oCACc,MAAM,EAClB,KAAK,EAAC,2BAA2B,EACjC,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,kBAAkB,EACjE,IAAI,QACJ,OAAO,EAAE,MAAM,IAAI,CAAC,aAAa,EAAE,IAEnC,cACE,IAAI,EAAE,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,aAAa,GAC3D,CACY,CACjB,EACD,eAAa,CACR,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CCard"],"sources":["./src/components/c-card/c-card.scss?tag=c-card&encapsulation=shadow","./src/components/c-card/c-card.tsx"],"sourcesContent":[":host {\n  --c-card-gap: 24px;\n\n  border-radius: 6px;\n  box-shadow: rgb(0 0 0 / 15%) 0px 10px 20px, rgb(0 0 0 / 20%) 0px 5px 5px;\n  display: flex;\n  flex-direction: column;\n  gap: var(--c-card-gap);\n  padding: var(--c-card-gap) 0;\n  position: relative;\n}\n\n::slotted(c-loader) {\n  border-radius: 6px;\n}\n\n:host(.c-card--fullscreen) {\n  height: 100vh;\n  left: 0 !important;\n  overflow-y: scroll;\n  position: fixed;\n  top: 0 !important;\n  width: 100vw;\n  z-index: 10;\n}\n\n.c-card {\n  &__fullscreen-toggle {\n    position: absolute;\n    right: 24px;\n    top: 24px;\n  }\n}\n","import { mdiFullscreen, mdiFullscreenExit } from '@mdi/js';\nimport {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  getAssetPath,\n  State,\n  Method,\n} from '@stencil/core';\n\nexport type CardBackground = 'puhti' | 'mahti' | 'allas';\n\n/**\n * @group Cards\n * @slot - Card contents\n */\n@Component({\n  tag: 'c-card',\n  styleUrl: 'c-card.scss',\n  shadow: true,\n  assetsDirs: ['assets'],\n})\nexport class CCard {\n  /**\n   * Card background image for login pages of specific services\n   */\n  @Prop() background: CardBackground;\n\n  /**\n   * Background color\n   */\n  @Prop() backgroundColor = 'white';\n\n  /**\n   * Enable the fullscreen toggle button\n   */\n  @Prop() fullscreen = false;\n\n  @State() isFullscreen = false;\n\n  @Element() host: HTMLCCardElement;\n\n  private _allowedBackgrounds = ['puhti', 'mahti', 'allas'];\n\n  private _onFullscreen() {\n    this.isFullscreen = !this.isFullscreen;\n\n    const modalWrapper =\n      this.host.parentElement?.shadowRoot?.querySelector('.modal-wrapper');\n\n    if (modalWrapper) {\n      (modalWrapper as HTMLDivElement).style.display = this.isFullscreen\n        ? 'block'\n        : 'flex';\n    }\n  }\n\n  componentDidLoad() {\n    const title = this.host.querySelector('c-card-title');\n\n    if (!!title && this.fullscreen) {\n      title.style.marginRight = '40px';\n    }\n  }\n\n  /**\n   * Exit fullscreen from the outside\n   */\n  @Method()\n  async exitFullscreen() {\n    this.isFullscreen = false;\n\n    const modalWrapper =\n      this.host.parentElement?.shadowRoot?.querySelector('.modal-wrapper');\n\n    if (modalWrapper) {\n      (modalWrapper as HTMLDivElement).style.display = 'flex';\n    }\n  }\n\n  /**\n   * Enter fullscreen from the outside\n   */\n  @Method()\n  async enterFullscreen() {\n    this.isFullscreen = true;\n  }\n\n  render() {\n    const style = {\n      'background-color': this.backgroundColor,\n    };\n\n    const hostClasses = {\n      'c-card': true,\n      'c-card--fullscreen': this.isFullscreen,\n    };\n\n    if (this._allowedBackgrounds.includes(this.background)) {\n      style['background-image'] = `url(${getAssetPath(\n        `./assets/${this.background}.gif`,\n      )}`;\n      style['background-size'] = 'cover';\n      style['background-position-y'] = 'bottom';\n    }\n\n    return (\n      <Host class={hostClasses} style={style}>\n        {this.fullscreen && (\n          <c-icon-button\n            aria-hidden=\"true\"\n            class=\"c-card__fullscreen-toggle\"\n            size=\"small\"\n            title={this.isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen'}\n            text\n            onClick={() => this._onFullscreen()}\n          >\n            <c-icon\n              path={this.isFullscreen ? mdiFullscreenExit : mdiFullscreen}\n            />\n          </c-icon-button>\n        )}\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}